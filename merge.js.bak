import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';

// 병합된 내용을 저장할 파일 경로
const mergedFile = 'src/content/docs/full.mdx';

// 병합할 MDX 파일 목록 (수동 입력)
const filesToMerge = [
    {
        path:  'perceivable/index',
        label: '1. 인식의 용이성'
    },
    {
        path: 'perceivable/1-1/1-1-1',
        label: '1.1 대체 텍스트'
    },
    {
        path: 'perceivable/1-2/1-2-1',
        label: '1.2 멀티미디어 대체수단'
    },
    {
        path: 'perceivable/1-3/1-3-1',
        label: '1.3 적응성'
    },
    {
        path: 'perceivable/1-4/1-4-1',
        label: '1.4 명료성'
    },
    {
        path:  'operable/index',
        label: '2. 운용의 용이성'
    },
    {
        path: 'operable/2-1/2-1-1',
        label: '2.1 입력장치 접근성'
    },
    {
        path: 'operable/2-2/2-2-1',
        label: '2.2 충분한 시간 제공'
    },
    {
        path: 'operable/2-3/2-3-1',
        label: '2.3 광과민성 발작 예방'
    },
    {
        path: 'operable/2-4/2-4-1',
        label: '2.4 쉬운 내비게이션'
    },
    {
        path: 'operable/2-5/2-5-1',
        label: '2.5 입력 방식'
    },
    {
        path:  'understandable/index',
        label: '3. 이해의 용이성'
    },
    {
        path: 'understandable/3-1/3-1-1',
        label: '3.1 가독성'
    },
    {
        path: 'understandable/3-2/3-2-1',
        label: '3.2 예측 가능성'
    },
    {
        path: 'understandable/3-3/3-3-1',
        label: '3.3 입력 도움'
    },
    {
        path:  'robust/index',
        label: '4. 견고성'
    },
    {
        path: 'robust/4-1/4-1-1',
        label: '4.1 문법 준수'
    },
    {
        path: 'robust/4-2/4-2-1',
        label: '4.2 웹 애플리케이션 접근성'
    },
    {
        label: '5. KWCAG 이해와 실무 적용',
        path: 'for-works/index'
    },
    {
        label: '실무 적용',
        path: 'for-works/working-reference'
    },
];

// MDX 파일에서 YAML 설정 추출 함수
function extractYaml(content) {
    const yamlRegex = /^---\s*([\s\S]*?)\s*---/m;
    const match = content.match(yamlRegex);
    if (match) {
        const yamlString = match[1];
        const yamlData = yaml.load(yamlString);
        let contentWithoutYaml = content.replace(yamlRegex, '').trim();

        // import 구문 삭제
        const importRegex = /import { Aside, Badge, Card } from '@astrojs\/starlight\/components';\n/g;
        contentWithoutYaml = contentWithoutYaml.replace(importRegex, '').trim();

        return { yaml: yamlData, content: contentWithoutYaml };
    }
    return { yaml: {}, content };
}

// 제목 레벨 조정 함수
function adjustHeadingLevels(content, levelChange = 1) {
    const regex = /(#+) (.*)/g;
    return content.replace(regex, (match, hashes, text) => {
        const newLevel = Math.min(6, Math.max(1, hashes.length + levelChange));
        return '#'.repeat(newLevel) + ' ' + text;
    });
}

// 디렉토리 스캔 함수
async function scanDirectory(directoryPath) {
    const files = [];
    const items = fs.readdirSync(directoryPath);

    for (const item of items) {
        const itemPath = path.join(directoryPath, item);
        const stat = fs.statSync(itemPath);

        if (stat.isDirectory()) {
            // 디렉토리인 경우, 재귀적으로 탐색
            const subFiles = await scanDirectory(itemPath);
            files.push(...subFiles);
        } else if (path.extname(item).toLowerCase() === '.mdx') {
            // MDX 파일인 경우 파일 경로 추가
            files.push(path.relative(directoryPath, itemPath));
        }
    }

    return files;
}

// 디렉토리를 스캔하여 중첩된 객체 구조로 반환하는 함수
async function scanDirectoryNested(directoryPath) {
    const result = [];
    const items = fs.readdirSync(directoryPath);

    for (const item of items) {
        const itemPath = path.join(directoryPath, item);
        const stat = fs.statSync(itemPath);

        if (stat.isDirectory()) {
            // 디렉토리인 경우, 재귀적으로 탐색
            const children = await scanDirectoryNested(itemPath);
            result.push({ type: 'directory', name: item, path: itemPath, children: children });
        } else if (path.extname(item).toLowerCase() === '.mdx') {
            // MDX 파일인 경우 파일 경로 추가
            result.push({ type: 'file', name: item, path: itemPath });
        }
    }

    return result;
}


// YAML frontmatter 생성 함수
function generateYamlFrontmatter(title, description) {
    const frontmatter = {
        title: title,
        description: description,
        tableOfContents: false
        // 필요한 다른 속성들을 추가할 수 있습니다.
    };
    return `---\n${yaml.dump(frontmatter)}---\n`;
}

// 스크립트 실행
async function main() {
    // YAML frontmatter 생성
    const yamlFrontmatter = generateYamlFrontmatter(
        '웹 접근성을 고려한 콘텐츠 제작기법 2.2',
        '한국형 웹 콘텐츠 접근성 지침(KWCAG) 2.2를 기반으로'
    );

    // import 구문 추가
    const importStatement = `import { Aside, Badge, Card } from '@astrojs/starlight/components'; \n\n`;

    // 병합된 내용
    let mergedContent = yamlFrontmatter + importStatement;

    for (const section of filesToMerge) {
        const fullPath = path.join('src/content/docs', section.path + '.mdx');
        if (fs.existsSync(fullPath)) {
            try {
                const fileContent = fs.readFileSync(fullPath, 'utf8');
                const { yaml: frontmatter, content: mdxContent } = extractYaml(fileContent);

                // index.mdx 파일인 경우 제목 생성을 건너뜁니다.
                if (section.path.endsWith('index')) {
                    mergedContent += `# ${section.label}\n\n`;
                } else {
                    // 제목 생성
                    mergedContent += `## ${section.label}\n\n`;
                }

                // 제목 레벨 조정
                const adjustedContent = adjustHeadingLevels(mdxContent, 1);
                mergedContent += adjustedContent + '\n\n';
            } catch (error) {
                console.error(`파일을 읽는 중 오류 발생: ${fullPath}, 오류 내용: ${error.message}`);
            }
        } else {
            console.warn(`파일 ${fullPath} 이 존재하지 않습니다. 설정 파일에 정의된 텍스트 레이블을 제목으로 추가합니다.`);
            mergedContent += `#${section.label}\n\n`;
        }
    }

    // 병합된 내용을 파일에 저장
    fs.writeFileSync(mergedFile, mergedContent, 'utf8');
    console.log(`MDX 파일이 ${mergedFile }에 병합되었습니다.`);

    const directoryStructure = await scanDirectoryNested('src/content/docs');
    // console.log(JSON.stringify(directoryStructure, null, 2));
}

main().catch(error => console.error(error));
